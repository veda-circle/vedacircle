{"version":3,"sources":["webpack:////Developer/Work/vcapp/vedacircle/node_modules/@angular/material/esm2015/icon.js.pre-build-optimizer.js"],"names":["__webpack_require__","d","__webpack_exports__","MatIconModule","MAT_ICON_LOCATION","MatIcon","MatIconRegistry","_angular_common__WEBPACK_IMPORTED_MODULE_0__","_angular_common_http__WEBPACK_IMPORTED_MODULE_1__","_angular_core__WEBPACK_IMPORTED_MODULE_2__","_angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__","rxjs__WEBPACK_IMPORTED_MODULE_4__","rxjs__WEBPACK_IMPORTED_MODULE_5__","rxjs__WEBPACK_IMPORTED_MODULE_6__","rxjs_operators__WEBPACK_IMPORTED_MODULE_7__","rxjs_operators__WEBPACK_IMPORTED_MODULE_8__","rxjs_operators__WEBPACK_IMPORTED_MODULE_9__","rxjs_operators__WEBPACK_IMPORTED_MODULE_10__","rxjs_operators__WEBPACK_IMPORTED_MODULE_11__","rxjs_operators__WEBPACK_IMPORTED_MODULE_12__","_angular_material_core__WEBPACK_IMPORTED_MODULE_13__","_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_14__","getMatIconNameNotFoundError","iconName","Error","getMatIconFailedToSanitizeUrlError","url","getMatIconFailedToSanitizeLiteralError","literal","SvgIconConfig","[object Object]","data","nodeName","this","svgElement","_httpClient","_sanitizer","document","_svgIconConfigs","Map","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","_document","addSvgIconInNamespace","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","HTML","_createSvgElementForSingleIcon","addSvgIconSetInNamespace","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","alias","className","set","get","safeUrl","RESOURCE_URL","cachedIcon","Object","cloneSvg","_loadSvgIconFromConfig","pipe","svg","name","key","iconKey","config","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","clear","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","filter","iconSetConfig","map","_loadSvgIconSetFromConfig","err","console","error","message","foundIcon","i","length","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","toLowerCase","_toSvgElement","appendChild","str","div","createElement","innerHTML","element","childNodes","nodeType","ELEMENT_NODE","setAttribute","inProgressFetch","req","responseType","delete","configNamespace","push","ngInjectableDef","factory","token","providedIn","MatIconBase","_elementRef","_MatIconMixinBase","_location","location","getPathname","pathname","search","funcIriAttributes","funcIriAttributeSelector","attr","join","funcIriPattern","elementRef","_iconRegistry","ariaHidden","super","_inline","nativeElement","inline","fontSet","_fontSet","value","_cleanupFontValue","fontIcon","_fontIcon","parts","split","changes","svgIconChanges","svgIcon","_splitIconName","getNamedSvgIcon","subscribe","_setSvgElement","log","previousValue","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","cachedElements","_elementsWithExternalReferences","size","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","textContent","path","_cacheChildrenWithExternalReferences","layoutElement","childCount","child","removeChild","elem","fontSetClass","classNameForFontAlias","getDefaultFontSetClass","_previousFontSetClass","classList","remove","add","_previousFontIconClass","trim","elements","forEach","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","attributes"],"mappings":"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","file":"1-es2015.54c39a608a51d4336a21.js","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DOCUMENT } from '@angular/common';\nimport { HttpClient } from '@angular/common/http';\nimport { Inject, Injectable, Optional, SecurityContext, SkipSelf, NgModule, Attribute, ChangeDetectionStrategy, Component, ElementRef, Input, ViewEncapsulation, InjectionToken, inject, ɵɵdefineInjectable, ɵɵinject } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { forkJoin, of, throwError } from 'rxjs';\nimport { catchError, finalize, map, share, tap, take } from 'rxjs/operators';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * \\@docs-private\n * @param {?} iconName\n * @return {?}\n */\nfunction getMatIconNameNotFoundError(iconName) {\n    return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including \\@angular/common/http.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatIconNoHttpProviderError() {\n    return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n        'Please include the HttpClientModule from @angular/common/http in your ' +\n        'app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * \\@docs-private\n * @param {?} url URL that was attempted to be sanitized.\n * @return {?}\n */\nfunction getMatIconFailedToSanitizeUrlError(url) {\n    return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n        `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * \\@docs-private\n * @param {?} literal HTML that was attempted to be sanitized.\n * @return {?}\n */\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\n    return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n        `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * \\@docs-private\n */\nclass SvgIconConfig {\n    /**\n     * @param {?} data\n     */\n    constructor(data) {\n        // Note that we can't use `instanceof SVGElement` here,\n        // because it'll break during server-side rendering.\n        if (!!((/** @type {?} */ (data))).nodeName) {\n            this.svgElement = (/** @type {?} */ (data));\n        }\n        else {\n            this.url = (/** @type {?} */ (data));\n        }\n    }\n}\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nclass MatIconRegistry {\n    /**\n     * @param {?} _httpClient\n     * @param {?} _sanitizer\n     * @param {?} document\n     */\n    constructor(_httpClient, _sanitizer, document) {\n        this._httpClient = _httpClient;\n        this._sanitizer = _sanitizer;\n        /**\n         * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n         */\n        this._svgIconConfigs = new Map();\n        /**\n         * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n         * Multiple icon sets can be registered under the same namespace.\n         */\n        this._iconSetConfigs = new Map();\n        /**\n         * Cache for icons loaded by direct URLs.\n         */\n        this._cachedIconsByUrl = new Map();\n        /**\n         * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n         */\n        this._inProgressUrlFetches = new Map();\n        /**\n         * Map from font identifiers to their CSS class names. Used for icon fonts.\n         */\n        this._fontCssClassesByAlias = new Map();\n        /**\n         * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n         * The default 'material-icons' value assumes that the material icon font has been loaded as\n         * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n         */\n        this._defaultFontSetClass = 'material-icons';\n        this._document = document;\n    }\n    /**\n     * Registers an icon by URL in the default namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} url\n     * @return {THIS}\n     */\n    addSvgIcon(iconName, url) {\n        return (/** @type {?} */ (this)).addSvgIconInNamespace('', iconName, url);\n    }\n    /**\n     * Registers an icon using an HTML string in the default namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} literal SVG source of the icon.\n     * @return {THIS}\n     */\n    addSvgIconLiteral(iconName, literal) {\n        return (/** @type {?} */ (this)).addSvgIconLiteralInNamespace('', iconName, literal);\n    }\n    /**\n     * Registers an icon by URL in the specified namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which the icon should be registered.\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} url\n     * @return {THIS}\n     */\n    addSvgIconInNamespace(namespace, iconName, url) {\n        return (/** @type {?} */ (this))._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n    }\n    /**\n     * Registers an icon using an HTML string in the specified namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which the icon should be registered.\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} literal SVG source of the icon.\n     * @return {THIS}\n     */\n    addSvgIconLiteralInNamespace(namespace, iconName, literal) {\n        /** @type {?} */\n        const sanitizedLiteral = (/** @type {?} */ (this))._sanitizer.sanitize(SecurityContext.HTML, literal);\n        if (!sanitizedLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        /** @type {?} */\n        const svgElement = (/** @type {?} */ (this))._createSvgElementForSingleIcon(sanitizedLiteral);\n        return (/** @type {?} */ (this))._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n    }\n    /**\n     * Registers an icon set by URL in the default namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} url\n     * @return {THIS}\n     */\n    addSvgIconSet(url) {\n        return (/** @type {?} */ (this)).addSvgIconSetInNamespace('', url);\n    }\n    /**\n     * Registers an icon set using an HTML string in the default namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} literal SVG source of the icon set.\n     * @return {THIS}\n     */\n    addSvgIconSetLiteral(literal) {\n        return (/** @type {?} */ (this)).addSvgIconSetLiteralInNamespace('', literal);\n    }\n    /**\n     * Registers an icon set by URL in the specified namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which to register the icon set.\n     * @param {?} url\n     * @return {THIS}\n     */\n    addSvgIconSetInNamespace(namespace, url) {\n        return (/** @type {?} */ (this))._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n    }\n    /**\n     * Registers an icon set using an HTML string in the specified namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which to register the icon set.\n     * @param {?} literal SVG source of the icon set.\n     * @return {THIS}\n     */\n    addSvgIconSetLiteralInNamespace(namespace, literal) {\n        /** @type {?} */\n        const sanitizedLiteral = (/** @type {?} */ (this))._sanitizer.sanitize(SecurityContext.HTML, literal);\n        if (!sanitizedLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        /** @type {?} */\n        const svgElement = (/** @type {?} */ (this))._svgElementFromString(sanitizedLiteral);\n        return (/** @type {?} */ (this))._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n    }\n    /**\n     * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n     * component with the alias as the fontSet input will cause the class name to be applied\n     * to the `<mat-icon>` element.\n     *\n     * @template THIS\n     * @this {THIS}\n     * @param {?} alias Alias for the font.\n     * @param {?=} className Class name override to be used instead of the alias.\n     * @return {THIS}\n     */\n    registerFontClassAlias(alias, className = alias) {\n        (/** @type {?} */ (this))._fontCssClassesByAlias.set(alias, className);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Returns the CSS class name associated with the alias by a previous call to\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n     * @param {?} alias\n     * @return {?}\n     */\n    classNameForFontAlias(alias) {\n        return this._fontCssClassesByAlias.get(alias) || alias;\n    }\n    /**\n     * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     *\n     * @template THIS\n     * @this {THIS}\n     * @param {?} className\n     * @return {THIS}\n     */\n    setDefaultFontSetClass(className) {\n        (/** @type {?} */ (this))._defaultFontSetClass = className;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     * @return {?}\n     */\n    getDefaultFontSetClass() {\n        return this._defaultFontSetClass;\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\n     * it will not contain any modifications made to elements previously returned).\n     *\n     * @param {?} safeUrl URL from which to fetch the SVG icon.\n     * @return {?}\n     */\n    getSvgIconFromUrl(safeUrl) {\n        /** @type {?} */\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        /** @type {?} */\n        const cachedIcon = this._cachedIconsByUrl.get(url);\n        if (cachedIcon) {\n            return of(cloneSvg(cachedIcon));\n        }\n        return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(tap((/**\n         * @param {?} svg\n         * @return {?}\n         */\n        svg => this._cachedIconsByUrl.set((/** @type {?} */ (url)), svg))), map((/**\n         * @param {?} svg\n         * @return {?}\n         */\n        svg => cloneSvg(svg))));\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n     * if not, the Observable will throw an error.\n     *\n     * @param {?} name Name of the icon to be retrieved.\n     * @param {?=} namespace Namespace in which to look for the icon.\n     * @return {?}\n     */\n    getNamedSvgIcon(name, namespace = '') {\n        // Return (copy of) cached icon if possible.\n        /** @type {?} */\n        const key = iconKey(namespace, name);\n        /** @type {?} */\n        const config = this._svgIconConfigs.get(key);\n        if (config) {\n            return this._getSvgFromConfig(config);\n        }\n        // See if we have any icon sets registered for the namespace.\n        /** @type {?} */\n        const iconSetConfigs = this._iconSetConfigs.get(namespace);\n        if (iconSetConfigs) {\n            return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n        }\n        return throwError(getMatIconNameNotFoundError(key));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._svgIconConfigs.clear();\n        this._iconSetConfigs.clear();\n        this._cachedIconsByUrl.clear();\n    }\n    /**\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n     * @private\n     * @param {?} config\n     * @return {?}\n     */\n    _getSvgFromConfig(config) {\n        if (config.svgElement) {\n            // We already have the SVG element for this icon, return a copy.\n            return of(cloneSvg(config.svgElement));\n        }\n        else {\n            // Fetch the icon from the config's URL, cache it, and return a copy.\n            return this._loadSvgIconFromConfig(config).pipe(tap((/**\n             * @param {?} svg\n             * @return {?}\n             */\n            svg => config.svgElement = svg)), map((/**\n             * @param {?} svg\n             * @return {?}\n             */\n            svg => cloneSvg(svg))));\n        }\n    }\n    /**\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\n     * First searches the available cached icons for a nested element with a matching name, and\n     * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n     * that have not been cached, and searches again after all fetches are completed.\n     * The returned Observable produces the SVG element if possible, and throws\n     * an error if no icon with the specified name can be found.\n     * @private\n     * @param {?} name\n     * @param {?} iconSetConfigs\n     * @return {?}\n     */\n    _getSvgFromIconSetConfigs(name, iconSetConfigs) {\n        // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n        // requested name.\n        /** @type {?} */\n        const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n        if (namedIcon) {\n            // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n            // time anyway, there's probably not much advantage compared to just always extracting\n            // it from the icon set.\n            return of(namedIcon);\n        }\n        // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n        // fetched, fetch them now and look for iconName in the results.\n        /** @type {?} */\n        const iconSetFetchRequests = iconSetConfigs\n            .filter((/**\n         * @param {?} iconSetConfig\n         * @return {?}\n         */\n        iconSetConfig => !iconSetConfig.svgElement))\n            .map((/**\n         * @param {?} iconSetConfig\n         * @return {?}\n         */\n        iconSetConfig => {\n            return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError((/**\n             * @param {?} err\n             * @return {?}\n             */\n            (err) => {\n                /** @type {?} */\n                const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n                // Swallow errors fetching individual URLs so the\n                // combined Observable won't necessarily fail.\n                console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n                return of(null);\n            })));\n        }));\n        // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n        // cached SVG element (unless the request failed), and we can check again for the icon.\n        return forkJoin(iconSetFetchRequests).pipe(map((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n            if (!foundIcon) {\n                throw getMatIconNameNotFoundError(name);\n            }\n            return foundIcon;\n        })));\n    }\n    /**\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     * @private\n     * @param {?} iconName\n     * @param {?} iconSetConfigs\n     * @return {?}\n     */\n    _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\n        // Iterate backwards, so icon sets added later have precedence.\n        for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n            /** @type {?} */\n            const config = iconSetConfigs[i];\n            if (config.svgElement) {\n                /** @type {?} */\n                const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n                if (foundIcon) {\n                    return foundIcon;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     * @private\n     * @param {?} config\n     * @return {?}\n     */\n    _loadSvgIconFromConfig(config) {\n        return this._fetchUrl(config.url)\n            .pipe(map((/**\n         * @param {?} svgText\n         * @return {?}\n         */\n        svgText => this._createSvgElementForSingleIcon(svgText))));\n    }\n    /**\n     * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     * @private\n     * @param {?} config\n     * @return {?}\n     */\n    _loadSvgIconSetFromConfig(config) {\n        // If the SVG for this icon set has already been parsed, do nothing.\n        if (config.svgElement) {\n            return of(config.svgElement);\n        }\n        return this._fetchUrl(config.url).pipe(map((/**\n         * @param {?} svgText\n         * @return {?}\n         */\n        svgText => {\n            // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n            // only needs to occur if the cache is yet unset.\n            if (!config.svgElement) {\n                config.svgElement = this._svgElementFromString(svgText);\n            }\n            return config.svgElement;\n        })));\n    }\n    /**\n     * Creates a DOM element from the given SVG string, and adds default attributes.\n     * @private\n     * @param {?} responseText\n     * @return {?}\n     */\n    _createSvgElementForSingleIcon(responseText) {\n        /** @type {?} */\n        const svg = this._svgElementFromString(responseText);\n        this._setSvgAttributes(svg);\n        return svg;\n    }\n    /**\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     * @private\n     * @param {?} iconSet\n     * @param {?} iconName\n     * @return {?}\n     */\n    _extractSvgIconFromSet(iconSet, iconName) {\n        // Use the `id=\"iconName\"` syntax in order to escape special\n        // characters in the ID (versus using the #iconName syntax).\n        /** @type {?} */\n        const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n        if (!iconSource) {\n            return null;\n        }\n        // Clone the element and remove the ID to prevent multiple elements from being added\n        // to the page with the same ID.\n        /** @type {?} */\n        const iconElement = (/** @type {?} */ (iconSource.cloneNode(true)));\n        iconElement.removeAttribute('id');\n        // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n        // the content of a new <svg> node.\n        if (iconElement.nodeName.toLowerCase() === 'svg') {\n            return this._setSvgAttributes((/** @type {?} */ (iconElement)));\n        }\n        // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n        // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n        // tag is problematic on Firefox, because it needs to include the current page path.\n        if (iconElement.nodeName.toLowerCase() === 'symbol') {\n            return this._setSvgAttributes(this._toSvgElement(iconElement));\n        }\n        // createElement('SVG') doesn't work as expected; the DOM ends up with\n        // the correct nodes, but the SVG content doesn't render. Instead we\n        // have to create an empty SVG node using innerHTML and append its content.\n        // Elements created using DOMParser.parseFromString have the same problem.\n        // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n        /** @type {?} */\n        const svg = this._svgElementFromString('<svg></svg>');\n        // Clone the node so we don't remove it from the parent icon set element.\n        svg.appendChild(iconElement);\n        return this._setSvgAttributes(svg);\n    }\n    /**\n     * Creates a DOM element from the given SVG string.\n     * @private\n     * @param {?} str\n     * @return {?}\n     */\n    _svgElementFromString(str) {\n        /** @type {?} */\n        const div = this._document.createElement('DIV');\n        div.innerHTML = str;\n        /** @type {?} */\n        const svg = (/** @type {?} */ (div.querySelector('svg')));\n        if (!svg) {\n            throw Error('<svg> tag not found');\n        }\n        return svg;\n    }\n    /**\n     * Converts an element into an SVG node by cloning all of its children.\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n    _toSvgElement(element) {\n        /** @type {?} */\n        let svg = this._svgElementFromString('<svg></svg>');\n        for (let i = 0; i < element.childNodes.length; i++) {\n            if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n                svg.appendChild(element.childNodes[i].cloneNode(true));\n            }\n        }\n        return svg;\n    }\n    /**\n     * Sets the default attributes for an SVG element to be used as an icon.\n     * @private\n     * @param {?} svg\n     * @return {?}\n     */\n    _setSvgAttributes(svg) {\n        svg.setAttribute('fit', '');\n        svg.setAttribute('height', '100%');\n        svg.setAttribute('width', '100%');\n        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n        svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n        return svg;\n    }\n    /**\n     * Returns an Observable which produces the string contents of the given URL. Results may be\n     * cached, so future calls with the same URL may not cause another HTTP request.\n     * @private\n     * @param {?} safeUrl\n     * @return {?}\n     */\n    _fetchUrl(safeUrl) {\n        if (!this._httpClient) {\n            throw getMatIconNoHttpProviderError();\n        }\n        if (safeUrl == null) {\n            throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n        }\n        /** @type {?} */\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n        // already a request in progress for that URL. It's necessary to call share() on the\n        // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n        /** @type {?} */\n        const inProgressFetch = this._inProgressUrlFetches.get(url);\n        if (inProgressFetch) {\n            return inProgressFetch;\n        }\n        // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n        // Observable. Figure out why and fix it.\n        /** @type {?} */\n        const req = this._httpClient.get(url, { responseType: 'text' }).pipe(finalize((/**\n         * @return {?}\n         */\n        () => this._inProgressUrlFetches.delete(url))), share());\n        this._inProgressUrlFetches.set(url, req);\n        return req;\n    }\n    /**\n     * Registers an icon config by name in the specified namespace.\n     * @private\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which to register the icon config.\n     * @param {?} iconName Name under which to register the config.\n     * @param {?} config Config to be registered.\n     * @return {THIS}\n     */\n    _addSvgIconConfig(namespace, iconName, config) {\n        (/** @type {?} */ (this))._svgIconConfigs.set(iconKey(namespace, iconName), config);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Registers an icon set config in the specified namespace.\n     * @private\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which to register the icon config.\n     * @param {?} config Config to be registered.\n     * @return {THIS}\n     */\n    _addSvgIconSetConfig(namespace, config) {\n        /** @type {?} */\n        const configNamespace = (/** @type {?} */ (this))._iconSetConfigs.get(namespace);\n        if (configNamespace) {\n            configNamespace.push(config);\n        }\n        else {\n            (/** @type {?} */ (this))._iconSetConfigs.set(namespace, [config]);\n        }\n        return (/** @type {?} */ (this));\n    }\n}\nMatIconRegistry.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */\nMatIconRegistry.ctorParameters = () => [\n    { type: HttpClient, decorators: [{ type: Optional }] },\n    { type: DomSanitizer },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ MatIconRegistry.ngInjectableDef = ɵɵdefineInjectable({ factory: function MatIconRegistry_Factory() { return new MatIconRegistry(ɵɵinject(HttpClient, 8), ɵɵinject(DomSanitizer), ɵɵinject(DOCUMENT, 8)); }, token: MatIconRegistry, providedIn: \"root\" });\n/**\n * \\@docs-private\n * @param {?} parentRegistry\n * @param {?} httpClient\n * @param {?} sanitizer\n * @param {?=} document\n * @return {?}\n */\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, document) {\n    return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst ICON_REGISTRY_PROVIDER = {\n    // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n    provide: MatIconRegistry,\n    deps: [\n        [new Optional(), new SkipSelf(), MatIconRegistry],\n        [new Optional(), HttpClient],\n        DomSanitizer,\n        [new Optional(), (/** @type {?} */ (DOCUMENT))],\n    ],\n    useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n/**\n * Clones an SVGElement while preserving type information.\n * @param {?} svg\n * @return {?}\n */\nfunction cloneSvg(svg) {\n    return (/** @type {?} */ (svg.cloneNode(true)));\n}\n/**\n * Returns the cache key to use for an icon namespace and name.\n * @param {?} namespace\n * @param {?} name\n * @return {?}\n */\nfunction iconKey(namespace, name) {\n    return namespace + ':' + name;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatIcon.\n/**\n * \\@docs-private\n */\nclass MatIconBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\n/** @type {?} */\nconst _MatIconMixinBase = mixinColor(MatIconBase);\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * \\@docs-private\n * @type {?}\n */\nconst MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {\n    providedIn: 'root',\n    factory: MAT_ICON_LOCATION_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_ICON_LOCATION_FACTORY() {\n    /** @type {?} */\n    const _document = inject(DOCUMENT);\n    /** @type {?} */\n    const _location = _document ? _document.location : null;\n    return {\n        // Note that this needs to be a function, rather than a property, because Angular\n        // will only resolve it once, but we want the current path on each call.\n        getPathname: (/**\n         * @return {?}\n         */\n        () => _location ? (_location.pathname + _location.search) : '')\n    };\n}\n/**\n * SVG attributes that accept a FuncIRI (e.g. `url(<something>)`).\n * @type {?}\n */\nconst funcIriAttributes = [\n    'clip-path',\n    'color-profile',\n    'src',\n    'cursor',\n    'fill',\n    'filter',\n    'marker',\n    'marker-start',\n    'marker-mid',\n    'marker-end',\n    'mask',\n    'stroke'\n];\nconst ɵ0 = /**\n * @param {?} attr\n * @return {?}\n */\nattr => `[${attr}]`;\n/**\n * Selector that can be used to find all elements that are using a `FuncIRI`.\n * @type {?}\n */\nconst funcIriAttributeSelector = funcIriAttributes.map((ɵ0)).join(', ');\n/**\n * Regex that can be used to extract the id out of a FuncIRI.\n * @type {?}\n */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\nclass MatIcon extends _MatIconMixinBase {\n    /**\n     * @param {?} elementRef\n     * @param {?} _iconRegistry\n     * @param {?} ariaHidden\n     * @param {?=} _location\n     */\n    constructor(elementRef, _iconRegistry, ariaHidden, _location) {\n        super(elementRef);\n        this._iconRegistry = _iconRegistry;\n        this._location = _location;\n        this._inline = false;\n        // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n        // the right thing to do for the majority of icon use-cases.\n        if (!ariaHidden) {\n            elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n        }\n    }\n    /**\n     * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n     * the element the icon is contained in.\n     * @return {?}\n     */\n    get inline() {\n        return this._inline;\n    }\n    /**\n     * @param {?} inline\n     * @return {?}\n     */\n    set inline(inline) {\n        this._inline = coerceBooleanProperty(inline);\n    }\n    /**\n     * Font set that the icon is a part of.\n     * @return {?}\n     */\n    get fontSet() { return this._fontSet; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set fontSet(value) {\n        this._fontSet = this._cleanupFontValue(value);\n    }\n    /**\n     * Name of an icon within a font set.\n     * @return {?}\n     */\n    get fontIcon() { return this._fontIcon; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set fontIcon(value) {\n        this._fontIcon = this._cleanupFontValue(value);\n    }\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws an error if the name contains two or more ':' separators.\n     * Examples:\n     *   `'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws Error)`\n     * @private\n     * @param {?} iconName\n     * @return {?}\n     */\n    _splitIconName(iconName) {\n        if (!iconName) {\n            return ['', ''];\n        }\n        /** @type {?} */\n        const parts = iconName.split(':');\n        switch (parts.length) {\n            case 1: return ['', parts[0]]; // Use default namespace.\n            case 2: return (/** @type {?} */ (parts));\n            default: throw Error(`Invalid icon name: \"${iconName}\"`);\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n        /** @type {?} */\n        const svgIconChanges = changes['svgIcon'];\n        if (svgIconChanges) {\n            if (this.svgIcon) {\n                const [namespace, iconName] = this._splitIconName(this.svgIcon);\n                this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe((/**\n                 * @param {?} svg\n                 * @return {?}\n                 */\n                svg => this._setSvgElement(svg)), (/**\n                 * @param {?} err\n                 * @return {?}\n                 */\n                (err) => console.log(`Error retrieving icon: ${err.message}`)));\n            }\n            else if (svgIconChanges.previousValue) {\n                this._clearSvgElement();\n            }\n        }\n        if (this._usingFontIcon()) {\n            this._updateFontIconClasses();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n        // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n        if (this._usingFontIcon()) {\n            this._updateFontIconClasses();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewChecked() {\n        /** @type {?} */\n        const cachedElements = this._elementsWithExternalReferences;\n        if (cachedElements && this._location && cachedElements.size) {\n            /** @type {?} */\n            const newPath = this._location.getPathname();\n            // We need to check whether the URL has changed on each change detection since\n            // the browser doesn't have an API that will let us react on link clicks and\n            // we can't depend on the Angular router. The references need to be updated,\n            // because while most browsers don't care whether the URL is correct after\n            // the first render, Safari will break if the user navigates to a different\n            // page and the SVG isn't re-rendered.\n            if (newPath !== this._previousPath) {\n                this._previousPath = newPath;\n                this._prependPathToReferences(newPath);\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _usingFontIcon() {\n        return !this.svgIcon;\n    }\n    /**\n     * @private\n     * @param {?} svg\n     * @return {?}\n     */\n    _setSvgElement(svg) {\n        this._clearSvgElement();\n        // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n        // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n        // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n        /** @type {?} */\n        const styleTags = (/** @type {?} */ (svg.querySelectorAll('style')));\n        for (let i = 0; i < styleTags.length; i++) {\n            styleTags[i].textContent += ' ';\n        }\n        // Note: we do this fix here, rather than the icon registry, because the\n        // references have to point to the URL at the time that the icon was created.\n        if (this._location) {\n            /** @type {?} */\n            const path = this._location.getPathname();\n            this._previousPath = path;\n            this._cacheChildrenWithExternalReferences(svg);\n            this._prependPathToReferences(path);\n        }\n        this._elementRef.nativeElement.appendChild(svg);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _clearSvgElement() {\n        /** @type {?} */\n        const layoutElement = this._elementRef.nativeElement;\n        /** @type {?} */\n        let childCount = layoutElement.childNodes.length;\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n        // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n        // we can't use innerHTML, because IE will throw if the element has a data binding.\n        while (childCount--) {\n            /** @type {?} */\n            const child = layoutElement.childNodes[childCount];\n            // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n            // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n            if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n                layoutElement.removeChild(child);\n            }\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _updateFontIconClasses() {\n        if (!this._usingFontIcon()) {\n            return;\n        }\n        /** @type {?} */\n        const elem = this._elementRef.nativeElement;\n        /** @type {?} */\n        const fontSetClass = this.fontSet ?\n            this._iconRegistry.classNameForFontAlias(this.fontSet) :\n            this._iconRegistry.getDefaultFontSetClass();\n        if (fontSetClass != this._previousFontSetClass) {\n            if (this._previousFontSetClass) {\n                elem.classList.remove(this._previousFontSetClass);\n            }\n            if (fontSetClass) {\n                elem.classList.add(fontSetClass);\n            }\n            this._previousFontSetClass = fontSetClass;\n        }\n        if (this.fontIcon != this._previousFontIconClass) {\n            if (this._previousFontIconClass) {\n                elem.classList.remove(this._previousFontIconClass);\n            }\n            if (this.fontIcon) {\n                elem.classList.add(this.fontIcon);\n            }\n            this._previousFontIconClass = this.fontIcon;\n        }\n    }\n    /**\n     * Cleans up a value to be used as a fontIcon or fontSet.\n     * Since the value ends up being assigned as a CSS class, we\n     * have to trim the value and omit space-separated values.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _cleanupFontValue(value) {\n        return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n    }\n    /**\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n     * reference. This is required because WebKit browsers require references to be prefixed with\n     * the current path, if the page has a `base` tag.\n     * @private\n     * @param {?} path\n     * @return {?}\n     */\n    _prependPathToReferences(path) {\n        /** @type {?} */\n        const elements = this._elementsWithExternalReferences;\n        if (elements) {\n            elements.forEach((/**\n             * @param {?} attrs\n             * @param {?} element\n             * @return {?}\n             */\n            (attrs, element) => {\n                attrs.forEach((/**\n                 * @param {?} attr\n                 * @return {?}\n                 */\n                attr => {\n                    element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n                }));\n            }));\n        }\n    }\n    /**\n     * Caches the children of an SVG element that have `url()`\n     * references that we need to prefix with the current path.\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n    _cacheChildrenWithExternalReferences(element) {\n        /** @type {?} */\n        const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n        /** @type {?} */\n        const elements = this._elementsWithExternalReferences =\n            this._elementsWithExternalReferences || new Map();\n        for (let i = 0; i < elementsWithFuncIri.length; i++) {\n            funcIriAttributes.forEach((/**\n             * @param {?} attr\n             * @return {?}\n             */\n            attr => {\n                /** @type {?} */\n                const elementWithReference = elementsWithFuncIri[i];\n                /** @type {?} */\n                const value = elementWithReference.getAttribute(attr);\n                /** @type {?} */\n                const match = value ? value.match(funcIriPattern) : null;\n                if (match) {\n                    /** @type {?} */\n                    let attributes = elements.get(elementWithReference);\n                    if (!attributes) {\n                        attributes = [];\n                        elements.set(elementWithReference, attributes);\n                    }\n                    (/** @type {?} */ (attributes)).push({ name: attr, value: match[1] });\n                }\n            }));\n        }\n    }\n}\nMatIcon.decorators = [\n    { type: Component, args: [{template: '<ng-content></ng-content>',\n                selector: 'mat-icon',\n                exportAs: 'matIcon',\n                styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1,1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\"],\n                inputs: ['color'],\n                host: {\n                    'role': 'img',\n                    'class': 'mat-icon notranslate',\n                    '[class.mat-icon-inline]': 'inline',\n                    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n            },] },\n];\n/** @nocollapse */\nMatIcon.ctorParameters = () => [\n    { type: ElementRef },\n    { type: MatIconRegistry },\n    { type: String, decorators: [{ type: Attribute, args: ['aria-hidden',] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_ICON_LOCATION,] }] }\n];\nMatIcon.propDecorators = {\n    inline: [{ type: Input }],\n    svgIcon: [{ type: Input }],\n    fontSet: [{ type: Input }],\n    fontIcon: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatIconModule {\n}\nMatIconModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [MatCommonModule],\n                exports: [MatIcon, MatCommonModule],\n                declarations: [MatIcon],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatIconModule, MAT_ICON_LOCATION_FACTORY, MAT_ICON_LOCATION, MatIcon, getMatIconNameNotFoundError, getMatIconNoHttpProviderError, getMatIconFailedToSanitizeUrlError, getMatIconFailedToSanitizeLiteralError, ICON_REGISTRY_PROVIDER_FACTORY, MatIconRegistry, ICON_REGISTRY_PROVIDER };\n//# sourceMappingURL=icon.js.map\n"],"sourceRoot":""}